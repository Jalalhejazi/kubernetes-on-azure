parameters:
  STAGE_NAME: ''
  STAGE_ENVIRONMENT: ''
  STAGE_K8S_SERVICE_ENDPOINT: ''
  STAGE_PUBLIC_IP: ''

stages:
- stage: ${{ parameters.STAGE_NAME }}
  jobs:  
  - deployment: SetupCluster
    pool: 
      vmImage: 'ubuntu-latest'
    environment: ${{ parameters.STAGE_ENVIRONMENT }}
    strategy: 
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: yaml
              targetPath: $(Build.SourcesDirectory)

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.2.0'

          - task: Kubernetes@1
            displayName: Configure ingress namespace
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              command: 'apply'
              arguments: 'namespace ingress-basic'

          - task: Bash@3
            displayName: "Repo add nginx"
            inputs:
              targetType: 'inline'
              script: 'helm repo add stable https://kubernetes-charts.storage.googleapis.com/'

          - task: HelmDeploy@0
            displayName: Install Nginx
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              namespace: 'ingress-basic'
              command: 'install'
              chartType: 'Name'
              chartName: 'stable/nginx-ingress'
              arguments: '--set controller.replicaCount=1 --set controller.service.loadBalancerIP=${{ parameters.STAGE_PUBLIC_IP }} --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux'

          - task: Kubernetes@1
            displayName: Create custom resources
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              command: 'apply'
              arguments: '--validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.13/deploy/manifests/00-crds.yaml'

          - task: Bash@3
            displayName: "Repo add jetstack"
            inputs:
              targetType: 'inline'
              script: 'helm repo add jetstack https://charts.jetstack.io'

          - task: Bash@3
            displayName: "Repo update"
            inputs:
              targetType: 'inline'
              script: 'helm repo update'

          - task: HelmDeploy@0
            displayName: Install cert-manager
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              namespace: 'ingress-basic'
              command: 'install'
              chartType: 'Name'
              chartName: 'jetstack/cert-manager'
              arguments: '--version v0.13.0'

          - task: Kubernetes@1
            displayName: Apply cluster issuer
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              command: 'apply'
              arguments: '-f $(Build.SourcesDirectory)/certificate-cluster-issuer.yaml'

          - task: Kubernetes@1
            displayName: Apply Hello World
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              namespace: 'ingress-basic'
              command: 'apply'
              arguments: '-f $(Build.SourcesDirectory)/aks-helloworld.yaml'

          - task: Kubernetes@1
            displayName: Ingress assign certificate
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              namespace: 'ingress-basic'
              command: 'apply'
              arguments: '-f $(Build.SourcesDirectory)/ingress-assign-certificate-${{ parameters.STAGE_NAME }}.yaml'

          - task: Kubernetes@1
            displayName: Create certificate
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: ${{ parameters.STAGE_K8S_SERVICE_ENDPOINT }}
              namespace: 'ingress-basic'
              command: 'apply'
              arguments: '-f $(Build.SourcesDirectory)/certificate-${{ parameters.STAGE_NAME }}.yaml'

