apiVersion: apps/v1
# A deployment is used to keep a set of pods running by creating pods from a template.
kind: Deployment

metadata:
  name: angular-kursus-2020
spec:

#  the replicas key sets the number of instances of the pod that the deployment should keep alive.
#  How many copies of each pod do we want? 1, 2, 3, 4, 5, 6, etc..
  replicas: 3

# How do want to update the pods?

# https://www.weave.works/blog/kubernetes-deployment-strategies

# recreate: terminate the old version and release the new one.
# ramped: release a new version on a rolling update fashion, one after the other.
# blue/green: release a new version alongside the old version then switch traffic.
# canary: release a new version to a subset of users, then proceed to a full rollout.

# In this type of very simple deployment 'Recreate', 
# all of the old pods are killed all at once and get replaced all at once with the new ones.
  strategy: 
    - Recreate

# Which pods are managed by this deployment?
  selector:
   # This must match the labels we set on the pod!
    matchLabels:
      app: angular-kursus-2020

# This template field is a regular pod configuration 
  # nested inside the deployment spec
  template:
    metadata:
      # Set labels on the pod.
      # This is used in the deployment selector.
      labels:
        app: angular-kursus-2020
    spec:
      
      containers:
      - name: angular-kursus-2020
        # https://dev.azure.com/superusers-kursus/angular/_git/ng-template-05?path=%2Fdockerfile
        image: jalalhejazi/angular-kursus-2020
        resources:
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
          name: angular

##################################################################################
---
apiVersion: v1

# A service is used to allow network access to a set of pods.
# must listen on default port 80
kind: Service
metadata:
  name: angular-kursus-2020
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: angular-kursus-2020




#######################################################################################
# This lets you do CANARY Deployments:
#
#           kubectl apply -f 200_angular_kursus_app.yaml
#
# You add a new deployment version of a pod and run it alongside your existing deployment, 
# but have both deployments handle requests to the service. 
# Once deployed, you can verify the new deployment on a small proportion of the service's traffic, 
# and gradually scale up the new deployment while decreasing the old one.
#
#
# 
#
# How to delete a deployment in Kubernetes ? 
#
#           kubectl delete -f 200_angular_kursus_app.yaml
#
#######################################################################################



